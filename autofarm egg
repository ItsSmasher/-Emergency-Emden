repeat task.wait() until game:IsLoaded() and workspace:FindFirstChild("Characters")

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:FindFirstChild("PlayerGui") or localPlayer:WaitForChild("PlayerGui")

local function notify(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

local function loaded()
    local label = playerGui:FindFirstChild("MoneyValue", true)
    if not label then return true end
    return label.Text ~= "loading"
end

repeat task.wait() until loaded()

notify("Egg Auto Collector", "Script Loaded! Starting farm...", 4)

local spawner = workspace:FindFirstChild("EggSpawner") or workspace:WaitForChild("EggSpawner")

local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local rootPart = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")

local gameId = game.PlaceId
local jobId = game.JobId

local visitedServers = {}

local teleportPoints = {
    Vector3.new(-1636.2384033203125, 44.214996337890625, -2050.36474609375),
    Vector3.new(-966.2034301757812, 44.35916519165039, -56.31230545043945),
    Vector3.new(496.6749267578125, 43.974769592285156, -1496.962890625)
}

local function collect()
    local count = 0
    for index = 1, 3 do
        for _, egg in spawner:GetChildren() do
            if egg:IsA("Model") then
                coroutine.wrap(function()
                    local mesh = egg:FindFirstChild("Egg") or egg:WaitForChild("Egg")
                    if mesh and mesh.Parent == egg then
                        pcall(function()
                            firetouchinterest(rootPart, mesh, 1)
                            firetouchinterest(rootPart, mesh, 0)
                            count += 1
                        end)
                    end
                end)()
            end
        end
        task.wait(0.5)
    end
    notify("Egg Collection", "Collected ~" .. count .. " eggs!", 3)
end

local function hopChunks()
    for _, position in ipairs(teleportPoints) do
        rootPart.CFrame = CFrame.new(position)
        task.wait(1.5)
        collect()
    end
end

local function findServerAndHop()
    task.wait(math.random(3.5, 4.5))

    local servers = "https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?sortOrder=Asc&limit=100"
    local server, _next = nil, nil

    local function list(cursor)
        local raw = game:HttpGet(servers .. ((cursor and "&cursor=" .. cursor) or ""))
        return HttpService:JSONDecode(raw)
    end

    repeat
        pcall(function()
            local serversData = list(_next)
            for _, s in pairs(serversData.data) do
                if s.playing < (s.maxPlayers / 2) and s.id ~= jobId and not visitedServers[s.id] then
                    server = s
                    break
                end
            end
            _next = serversData.nextPageCursor
        end)
    until server

    if server and server.id then
        notify("Server Hop", "Teleporting to new server...", 4)
        visitedServers[server.id] = true
        TeleportService:TeleportToPlaceInstance(gameId, server.id, localPlayer)
    end
end

-- Auto-exec loop with local chunk hopping
while true do
    hopChunks()
    findServerAndHop()
    task.wait(1)
end
